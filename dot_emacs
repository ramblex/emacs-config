;; Alex's dot emacs file 2009
(server-start)

;; Common lisp
(require 'cl)

;; Window style
(setq inhibit-startup-message t) ;; Supress the GNU startup message
(line-number-mode 1)
(column-number-mode 1)
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(setq frame-title-format "%f")
(modify-all-frames-parameters '((width . 120)
				(height . 42)
				(cursor-type bar . 1)
				(fringe-style . none)))
(fset 'yes-or-no-p 'y-or-n-p)
(setq visible-bell nil)
(set-face-attribute 'mode-line nil :box nil)

(defun ecb-vc-dir-managed-by-GIT (directory)
  (let* ((cannon (ecb-fix-filename (file-truename directory)))
         (gitdir (concat cannon "/.git/")))
    (if (equal cannon (ecb-fix-filename "/"))
        nil
      (if (and (ecb-file-exists-p gitdir)
               (locate-library "vc-git"))
          'GIT
        (ecb-vc-dir-managed-by-GIT (concat cannon "/../"))))))

;; Add extra paths
(defvar emacs-root "/home/alexd/emacs/")
(labels ((add-path (p)
	 (add-to-list 'load-path
			(concat emacs-root p))))
 (add-path "plugins/yasnippet") ;; yasnippet
 (add-path "custom") ;; all my personal elisp code
 (add-path "modes")
 (add-path "modes/ruby-mode")
 (add-path "modes/rhtml-mode")
 (add-path "plugins")
 (add-path "plugins/rinari")
 (add-path "plugins/yasnippet/rails")
 (add-path "plugins/ecb")
 (add-path "plugins/erc")
 (add-path "plugins/color-theme")
)

;; Highlighting
(show-paren-mode 1)
(global-hl-line-mode 1) ;; Highlight the current line
(transient-mark-mode 1)

; Make M-h work properly on mac
(setq mac-pass-command-to-system nil)

;; Ensure syntax highlighting is enabled
(global-font-lock-mode 1)

(require 'tramp)
(setq tramp-default-method "scp")

;; ===========
;; Extra modes
;; ===========
;; Colour scheme
(require 'color-theme)

;; rhtml
(require 'rhtml-mode)
(add-hook 'rhtml-mode-hook (lambda () (rinari-launch)))
(setq auto-mode-alist (cons '("\\.erb$" . rhtml-mode) auto-mode-alist))

;; Ruby
(autoload 'ruby-mode "ruby-mode" "Major mode for ruby files" t)
(add-to-list 'auto-mode-alist '("\\.builder$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rjs$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rxml$" . ruby-mode))
(require 'ruby-on-rails-mode)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
;(add-to-list 'auto-mode-alist '("\\.rb" . ruby-on-rails-mode))

;; This is replaced by textmate
;(require 'ruby-electric)
;(add-hook 'ruby-mode-hook (lambda () (ruby-electric-mode t)))

;; Ruby documentation
(setq ri-ruby-script (concat emacs-root "plugins/ri-emacs/ri-emacs.rb"))
(autoload 'ri (concat emacs-root "plugins/ri-emacs/ri-ruby.el") nil t)

;; YAML
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

;; LaTeX
(setq latex-run-command "/usr/texbin/pdflatex")
(setq tex-dvi-view-command "open -a Adobe\ Reader")

;; D mode
(autoload 'd-mode "d-mode" "Major mode for editing D code." t)
(add-to-list 'auto-mode-alist '("\\.d[i]?\\'" . d-mode))

;; Electric parens TM style
(load-file (concat emacs-root "plugins/textmate.el"))
(require 'textmate-mode)

;; There must be some way of starting this minor mode in all major modes!!
(add-hook 'ruby-mode-hook (lambda () (textmate-mode t)))
(add-hook 'c-mode-hook (lambda () (textmate-mode t)))
(add-hook 'emacs-lisp-mode-hook (lambda () (textmate-mode t)))
(add-hook 'python-mode-hook (lambda () (textmate-mode t)))
(add-hook 'latex-mode-hook (lambda () (textmate-mode t)))

(autoload 'make-regexp "make-regexp"
   "Return a regexp to match a string item in STRINGS.")

(autoload 'bison-mode "bison-mode.el")
;(add-to-list 'auto-mode-alist '("\\.y$" . bison-mode))
(add-to-list 'auto-mode-alist '("\\.l$" . c-mode))

;; =======
;; Plugins
;; =======
;; Pastie
(require 'pastie)
;; CEDET
(load-file (concat emacs-root "plugins/cedet/common/cedet.el"))

;; Enable EDE (Project Management) features
;(global-ede-mode 1)

;; * This enables even more coding tools such as intellisense mode
;;   decoration mode, and stickyfunc mode (plus regular code helpers)
;(semantic-load-enable-gaudy-code-helpers)

;; ERC
(require 'erc)

;; Smart compile
(require 'smart-compile)
(autoload 'smart-compile "mode-compile"
  "Command to compile current buffer file based on the major mode" t)

;; ECB
(require 'ecb)
(require 'whitespace)

;; Rinari
(require 'rinari)

;; Yet another snippet
(require 'yasnippet)
(yas/initialize)
(defvar yas/indent-line 1)
(yas/load-directory (concat emacs-root "plugins/yasnippet/rails"))
(yas/load-directory (concat emacs-root "plugins/yasnippet/snippets"))

;; ido
(require 'ido)
(ido-mode t)
(setq ido-case-fold t)
(setq ido-confirm-unique-completion t)

;; Hippie
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
	try-expand-dabbrev-all-buffers
	try-expand-dabbrev-from-kill
	try-complete-file-name-partially
	try-complete-file-name
	try-complete-lisp-symbol-partially
	try-complete-lisp-symbol
	indent-for-tab-command))

;; Indentation style
(setq default-tabs-mode nil)
(setq my-c-style
      '((c-basic-offset  . 2)
	(c-comment-only-line-offset . 0)
	(c-hanging-braces-alist . ((brace-list-open)
				   (brace-entry-open)
				   (substatement-open after)
				   (block-close . c-snug-do-while)))
	(c-cleanup-list . (brace-else-brace))
	(c-offsets-alist . ((statement-block-intro . +)
			    (knr-argdecl-intro     . 0)
			    (substatement-open     . 0)
			    (label                 . 0)
			    (statement-cont        . +)
			    ))
	))
(add-hook 'c-mode-common-hook
	  (function (lambda () (c-add-style "my-style" my-c-style t))))

; Backup settings
(defconst use-backup-dir t)
(setq backup-directory-alist (quote ((".*" . "~/backup/temp/")))
      version-control t                ; Use version numbers for backups
      kept-new-versions 16             ; Number of newest versions to keep
      kept-old-versions 2              ; Number of oldest versions to keep
      delete-old-versions t            ; Ask to delete excess backup versions?
      backup-by-copying-when-linked t) ; Copy linked files, don't rename.

;; Copy line
(defun copy-line (&optional arg)
  "Do a kill-line but copy rather than kill.  This function directly calls
kill-line, so see documentation of kill-line for how to use it including prefix
argument and relevant variables.  This function works by temporarily making the
buffer read-only, so I suggest setting kill-read-only-ok to t."
  (interactive "P")
  (toggle-read-only 1)
  (kill-line arg)
  (toggle-read-only 0))
 
(setq-default kill-read-only-ok t)

;; Keyboard shortcuts
(global-set-key "\C-c\C-k" 'copy-line)
(global-set-key [f7] 'recompile)
(global-set-key [f8] 'mode-compile)
(global-set-key [f10] 'next-error)
(global-set-key [f11] 'previous-error)
(global-set-key (kbd "M-[") 'backward-paragraph)
(global-set-key (kbd "M-]") 'forward-paragraph)
(global-set-key (kbd "M-5") 'vi-paren-bounce)
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-cp" 'fill-paragraph)
(global-set-key "\C-ca" 'align)
(global-set-key "\C-cr" 'align-regexp)
(global-set-key "\C-c<" 'ecb-deactivate)
(global-set-key "\C-c>" 'ecb-activate)

;; Fix for tab completion everywhere
(add-hook 'ido-setup-hook
	  (lambda () (define-key ido-completion-map [tab] 'ido-complete)))

(defun vi-paren-bounce ()
  "Bounce between parens like in VI"
  (interactive)
  (let ((prev-char (char-to-string (preceding-char)))
	(next-char (char-to-string (following-char))))
    (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
	  ((string-match "[\]})>]" prev-char) (backward-sexp 1))
	  (t (error "%s" "Not on a paren, brace, or bracket")))))

(add-hook 'ecb-deactivate-hook
	  (lambda () (modify-all-frames-parameters '((width . 80)))))
(add-hook 'ecb-activate-hook
	  (lambda () (ecb-redraw-layout)))
(add-hook 'ecb-activate-hook
	  (lambda () (modify-all-frames-parameters '((width . 120)))))

;; Custom colour scheme based on railscasts
(load-library "railscasts-colour")

(setq custom-file (concat emacs-root "custom/custom.el"))
(load custom-file 'noerror)
